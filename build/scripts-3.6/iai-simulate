#!/home/jadrion/miniconda3/envs/relernn/bin/python

from iai.imports import *
from iai.helpers import *
from iai.manager import *
from iai.simulator import *


def main():
    parser = argparse.ArgumentParser()
    #parser.add_argument('-v','--vcf',dest='vcf',help='Filtered and QC-checked VCF file. Important: Every row must correspond to a biallelic SNP')
    #parser.add_argument('-g','--genome',dest='genome',help='BED-formatted (i.e. zero-based) file corresponding to chromosomes and positions to evaluate')
    #parser.add_argument('-m','--mask',dest='mask',help='BED-formatted file corresponding to inaccessible bases', default=None)
    parser.add_argument('-d','--projectDir',dest='outDir',help='Directory for all project output. NOTE: the same projectDir must be used for all functions of i-against-i',default=None)
    #parser.add_argument('-n','--demographicHistory',dest='dem',help='Output file from either stairwayplot, SMC++, or MSMC',default=None)
    #parser.add_argument('-u','--assumedMu',dest='mu',help='Assumed per-base mutation rate',type=float,default=1e-8)
    parser.add_argument('-u_lo','--assumedMu_lo',dest='mu_lo',help='Lower bound of assumed per-base mutation rate',type=float,default=1e-8)
    parser.add_argument('-u_hi','--assumedMu_hi',dest='mu_hi',help='Upper bound of assumed per-base mutation rate',type=float,default=1e-8)
    parser.add_argument('-r_lo','--assumedR_lo',dest='r_lo',help='Lower bound of assumed per-base recombination rate',type=float,default=1e-8)
    parser.add_argument('-r_hi','--assumedR_hi',dest='r_hi',help='Upper bound of assumed per-base recombination rate',type=float,default=1e-8)
    parser.add_argument('-gr_lo','--assumedGr_lo',dest='gr_lo',help='Lower bound of assumed population size growth rate',type=float,default=0.004)
    parser.add_argument('-gr_hi','--assumedGr_hi',dest='gr_hi',help='Upper bound of assumed population size growth rate',type=float,default=0.004)
    parser.add_argument('-ne_lo','--assumedNe_lo',dest='ne_lo',help='Lower bound of assumed effective population size',type=float,default=0.004)
    parser.add_argument('-ne_hi','--assumedNe_hi',dest='ne_hi',help='Upper bound of assumed effective population size',type=float,default=0.004)
    parser.add_argument('-f','--fractionGrowth',dest='fGrowth',help='Fraction of training examples that will be simulated under a model of  exponential growth',type=float,default=0.5)
    parser.add_argument('--cLen',dest='cLen',help='Length of chromosome to simulate',type=int,default=1000000)
    parser.add_argument('--sam',dest='sam',help='sample size',type=int,default=10)
    #parser.add_argument('-l','--assumedGenTime',dest='genTime',help='Assumed generation time (in years)',type=float)
    #parser.add_argument('-r','--upperRhoThetaRatio',dest='upRTR',help='Assumed upper bound for the ratio of rho to theta',type=float,default=1.0)
    parser.add_argument('-t','--nCPU',dest='nCPU',help='Number of CPUs to use',type=int,default=1)
    parser.add_argument('--phased',help='Treat genotypes as phased',default=False, action='store_true')
    parser.add_argument('--unphased',dest='phased',help='Treat genotypes as unphased',action='store_false')
    #parser.add_argument('--forceDiploid',help='Treat all samples as diploids with missing data (bad idea; see README)',default=False, action='store_true')
    #parser.add_argument('--phaseError',dest='phaseError',help='Fraction of bases simulated with incorrect phasing',type=float,default=0.0)
    #parser.add_argument('--maxWinSize',dest='winSizeMx',help='Max number of sites per window to train on. Important: too many sites causes problems in training (see README)!',type=int,default=1750)
    #parser.add_argument('--forceWinSize',dest='forceWinSize',help='USED ONLY FOR TESTING, LEAVE AS DEFAULT',type=int,default=0)
    #parser.add_argument('--maskThresh',dest='maskThresh',help='Discard windows where >= maskThresh percent of sites are inaccessible',type=float,default=1.0)
    parser.add_argument('--nTrain',dest='nTrain',help='Number of training examples to simulate',type=int,default=100000)
    parser.add_argument('--nVali',dest='nVali',help='Number of validation examples to simulate',type=int,default=1000)
    parser.add_argument('--nTest',dest='nTest',help='Number of test examples to simulate',type=int,default=1000)
    args = parser.parse_args()
    
    # Ensure all required arguments are provided
    #if not args.vcf.endswith(".vcf"):
    #    print('Error: VCF file must end in extension ".vcf"')
    #    sys.exit(1)
    if not args.outDir:
        print("Warning: No project directory found, using current working directory.")
        projectDir = os.getcwd()
    else:
        projectDir = args.outDir
    #if not args.mask:
    #    print("Warning: no accessibility mask found. All sites in the genome are assumed to be accessible.") 
    #if args.dem:
    #    demHist = check_demHist(args.dem)
    #    if demHist == -9:
    #        print("Error: demographicHistory file must be raw output from either stairwayplot, SMC++, or MSMC")
    #        sys.exit(1)
    #    if not args.genTime:
    #        print("Error: assumed generation time must be supplied when simulating under stairwayplot, SMC++, or MSMC")
    #        sys.exit(1)
    #else:
    #    print("Warning: no demographic history file found. All training data will be simulated under demographic equilibrium.")
    #    demHist = 0
    #if not args.phased and args.phaseError != 0.0:
    #    print("Error: non-zero 'phaseError' cannot be used in conjunction with '--unphased'")
    #    sys.exit(1)
    #if args.forceDiploid:
    #    print("Warning: all haploid/hemizygous samples will be treated as diploid samples with missing data!\n",
    #            "If you want to treat haploid/hemizygous samples and haploids without missing data, quit now, ensure no diploid samples are found in this VCF, and rerun without the option `--forceDiploid`.")
    #    time.sleep(10)
    #else:
    #    time.sleep(5)
    
    
    ## Set up the directory structure to store the simulations data.
    nProc = args.nCPU
    trialDir = os.path.join(projectDir,"trial")
    trainDir = os.path.join(projectDir,"train")
    valiDir = os.path.join(projectDir,"vali")
    testDir = os.path.join(projectDir,"test")
    networkDir = os.path.join(projectDir,"networks")
    vcfDir = os.path.join(projectDir,"splitVCFs")


    ## Make directories if they do not exist
    for p in [projectDir,trialDir,trainDir,valiDir,testDir,networkDir,vcfDir]:
        if not os.path.exists(p):
            os.makedirs(p)

    assumedMu_lo = args.mu_lo
    assumedMu_hi = args.mu_hi
    assumedR_lo = args.r_lo
    assumedR_hi = args.r_hi
    assumedGr_lo = args.gr_lo
    assumedGr_hi = args.gr_hi
    assumedNe_lo = args.ne_lo
    assumedNe_hi = args.ne_hi
    nSamps = args.sam
    cLen = args.cLen
    
    dg_params = {'N':nSamps,
        'Ne_growth_lo':assumedNe_lo,
        'Ne_growth_hi':assumedNe_hi,
        'priorLowsRho':assumedR_lo,
        'priorHighsRho':assumedR_hi,
        'priorLowsMu':assumedMu_lo,
        'priorHighsMu':assumedMu_hi,
        'priorLowsGr':assumedGr_lo,
        'priorHighsGr':assumedGr_hi,
        'ChromosomeLength':cLen,
        'winMasks':None,
        'maskThresh':None,
        'phased':args.phased,
        'fractionGrowth': 1
              }

    # Assign pars for each simulation
    dg_trial = Simulator(**dg_params)
    
    print("\nDetermine relative Ne for simulations with and without growth...")
    dg_trial.simulateAndProduceTrees(numReps=args.nTrain,direc=trialDir,simulator="msprime",nProc=nProc)
    
    DsInfoDir = pickle.load(open(os.path.join(trialDir,"info.p"),"rb"))
    S = DsInfoDir["segSites"]
    #print(min(S))
    #print(np.mean(S))
    #print(max(S))
    a=0
    for i in range(nSamps-1):
        a+=1/(i+1)
    thetaW=np.average(S)/float(a)
    Ne_fromTheta=int(thetaW/(4.0 * np.mean([assumedMu_lo,assumedMu_hi]) * cLen))
    
    
    print("Ne inferred from thetaW:",Ne_fromTheta)
    

    dg_params = {'N':nSamps,
        'Ne_growth_lo':assumedNe_lo,
        'Ne_growth_hi':assumedNe_hi,
        'Ne_noGrowth':Ne_fromTheta,
        'priorLowsRho':assumedR_lo,
        'priorHighsRho':assumedR_hi,
        'priorLowsMu':assumedMu_lo,
        'priorHighsMu':assumedMu_hi,
        'priorLowsGr':assumedGr_lo,
        'priorHighsGr':assumedGr_hi,
        'ChromosomeLength':cLen,
        'winMasks':None,
        'maskThresh':None,
        'phased':args.phased,
        'fractionGrowth': args.fGrowth
              }
    
    # Assign pars for each simulation
    dg_train = Simulator(**dg_params)
    dg_vali = Simulator(**dg_params)
    dg_test = Simulator(**dg_params)

    ## Dump simulation pars for use with parametric bootstrap
    simParsFILE=os.path.join(networkDir,"simPars.p")
    with open(simParsFILE, "wb") as fOUT:
        dg_params["bn"]=os.path.basename(projectDir)
        pickle.dump(dg_params,fOUT)

    ## Simulate data
    print("\nTraining set:")
    dg_train.simulateAndProduceTrees(numReps=args.nTrain,direc=trainDir,simulator="msprime",nProc=nProc)
    print("Validation set:")
    dg_vali.simulateAndProduceTrees(numReps=args.nVali,direc=valiDir,simulator="msprime",nProc=nProc)
    print("Test set:")
    dg_test.simulateAndProduceTrees(numReps=args.nTest,direc=testDir,simulator="msprime",nProc=nProc)
    print("\nSIMULATIONS FINISHED!\n")
    
    
    ## Count number of segregating sites in simulation
    SS=[]
    maxSegSites = 0
    minSegSites = float("inf")
    #for ds in [trainDir,valiDir,testDir,testDirLo,testDirHi]:
    for ds in [trainDir,valiDir,testDir]:
        DsInfoDir = pickle.load(open(os.path.join(ds,"info.p"),"rb"))
        SS.extend(DsInfoDir["segSites"])
        segSitesInDs = max(DsInfoDir["segSites"])
        segSitesInDsMin = min(DsInfoDir["segSites"])
        maxSegSites = max(maxSegSites,segSitesInDs)
        minSegSites = min(minSegSites,segSitesInDsMin)
    ## Compare counts of segregating sites between simulations and input VCF
    print("SANITY CHECK")
    print("====================")
    print("numSegSites\t\t\tMin\tMean\tMax")
    print("Simulated:\t\t\t%s\t%s\t%s" %(minSegSites, int(sum(SS)/float(len(SS))), maxSegSites))
    print("\n\n***FINISHED***\n")


if __name__ == "__main__":
	main()
